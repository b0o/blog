---
import CopyCodeBlockButton from '@components/CopyCodeBlockButton'
import DevIcon, { DevIconName } from '@components/DevIcon.astro'
import { useTranslate } from '@utils/i18n'
import { FileText } from 'lucide-react'
import * as DevIcons from './devicons'
import type { Lang } from 'shiki'
import type { HTMLAttributes } from 'astro/types'
import '@assets/css/twoslash.css'
import IconButton from './IconButton'

const t = useTranslate(Astro)

type Props = HTMLAttributes<'pre'> & {
  shikiBg: string
  shikiFg: string
  title: string
  lang: Lang
  twoslash: boolean
  codeToCopy: string
  playgroundURL: string | null
}

const {
  shikiBg,
  shikiFg,
  title,
  lang,
  codeToCopy,
  twoslash,
  playgroundURL,
  ...rest
} = Astro.props

const getDevIconNameByShikiLang = (lang: Lang): DevIconName | undefined => {
  const shikiLangToDevIconName: Partial<Record<Lang, DevIconName>> = {
    jsx: 'Javascript',
    tsx: 'Typescript',
    js: 'Javascript',
    ts: 'Typescript',
    css: 'Css3',
    html: 'Html5',
    shell: 'Bash',
  }

  if (lang in shikiLangToDevIconName) {
    return shikiLangToDevIconName[lang as keyof typeof shikiLangToDevIconName]
  }
}

const getShikiLangName = (lang: Lang): string | undefined => {
  const shikiLangToName: Partial<Record<Lang, string>> = {
    jsx: 'JavaScript',
    tsx: 'TypeScript',
    javascript: 'JavaScript',
    js: 'JavaScript',
    ts: 'TypeScript',
    typescript: 'TypeScript',
    shell: 'Bash',
    html: 'HTML',
    css: 'CSS',
    mdx: 'MDX',
  }

  if (lang in shikiLangToName) {
    return shikiLangToName[lang as keyof typeof shikiLangToName]
  }
}

const langName = getShikiLangName(Astro.props.lang) || Astro.props.lang

const isDevIconName = (str: string): str is DevIconName => {
  return Object.keys(DevIcons)
    .map((iconName) => iconName.toLowerCase())
    .includes(str)
}

const capitalize = <T extends string>(str: T) =>
  (str.charAt(0).toUpperCase() + str.slice(1)) as Capitalize<T>

const devIconName = isDevIconName(lang)
  ? (capitalize(Astro.props.lang) as DevIconName)
  : getDevIconNameByShikiLang(lang)

const shouldShowHeader = title !== '' || langName !== ''
---

<style is:global define:vars={{ 'code-bg': shikiBg, 'code-fg': shikiFg }}
></style>

<div
  data-codeblock
  class:list={[
    shouldShowHeader ? 'mt-16' : 'mt-8',
    'full-width-on-mobile',
    '[&_pre]:max-sm:rounded-none',
    'relative',
    'mb-8',
    'last:mb-0',
  ]}
>
  <pre
    class:list={[
      'peer',
      'relative',
      'shiki',
      twoslash && 'twoslash',
      'shadow-sm',
      'shadow-shadow',
      'rounded',
      shouldShowHeader && 'rounded-tl-none',
      'overflow-x-auto',
      'bg-[var(--code-bg)]',
      'text-[var(--code-fg)]',
      '[color-scheme:dark]',
      '[&_code]:py-4',
      '[&_code]:grid',
      '[&_code>.line]:px-8',
      '[&_code>.line]:border-l-[2px]',
      '[&_code>.line]:border-[var(--code-bg)]',
      '[&_code>.line.highlight]:bg-[#272115]',
      '[&_code>.line.highlight]:border-[#624710]',
      '[&_.error]:text-sm',
      '[&_.error]:px-8',
      '[&_.error]:py-1',
      '[&_.popover]:my-2',
      '[&_.popover]:rounded-sm',
      '[&_.popover]:bg-gray-700',
      '[&_.popover]:text-white',
      '[&_.arrow]:bg-gray-700',
      '[&_.arrow]:border-gray-700',
      Astro.props.class,
    ]}
    {...rest}><slot /></pre>

  {
    shouldShowHeader && (
      <div class="text-md dark absolute left-horizontal-padding top-0 mx-auto max-w-[calc(100%-var(--horizontal-padding)*2)] -translate-y-[100%] overflow-hidden sm:left-0">
        <div class="flex items-center gap-2 rounded-t border-t border-primary bg-[var(--code-bg)] px-2 py-1 text-[var(--code-fg)]">
          <div class="shrink-0">
            {devIconName ? <DevIcon name={devIconName} /> : <FileText />}
          </div>

          {title ? (
            <div class="rtl truncate text-right font-mono">
              <bdi>{title}</bdi>
            </div>
          ) : (
            <div class="capitalize">{langName}</div>
          )}
        </div>
      </div>
    )
  }

  <div
    class:list={[
      'dark',
      'flex',
      'flex-row',
      'gap-2',
      'absolute',
      'top-3',
      'right-[var(--horizontal-padding)]',
      'text-2xl',
      '[&_svg]:h-[1em] [&_svg]:w-[1em]',
      '[&_:is(button,a)]:opacity-0',
      '[&_:is(button,a)]:pointer-events-none',
      'peer-hover:[&_:where(button,a)]:opacity-100',
      'peer-hover:[&_:where(button,a)]:pointer-events-auto',
      '[&_:where(button,a)]:hover:opacity-100',
      '[&_:where(button,a)]:hover:pointer-events-auto',
      '[&_:is(button,a)]:transition-opacity',
      '[&_:is(button,a)]:duration-500',
    ]}
  >
    {
      playgroundURL && (
        <IconButton variant="rounded" href={playgroundURL} target="_blank">
          <DevIcon name="Typescript" />
        </IconButton>
      )
    }

    <CopyCodeBlockButton
      client:load
      aria-label={t.CopyCodeButtonLabel()}
      successTooltipText={t.Copied() + '!'}
      errorTooltipText={t.FailedToCopy()}
      code={codeToCopy}
    />
  </div>
</div>

<script>
  import { computePosition, offset, flip } from '@floating-ui/dom'

  for (const lspElement of document.querySelectorAll<HTMLElement>(
    '[data-codeblock] pre.twoslash data-lsp'
  )) {
    lspElement.addEventListener('mouseover', async (e) => {
      if (!e.target) {
        return
      }

      const tooltip = document.createElement('div')
      const reference = e.target as HTMLElement

      tooltip.setAttribute('role', 'tooltip')

      const tooltipId = 'twoslash-lsp-tooltip'
      tooltip.setAttribute('id', tooltipId)
      reference.setAttribute('aria-describedby', tooltipId)

      const { x, y } = await computePosition(reference, tooltip, {
        placement: 'bottom-start',
        middleware: [offset(8), flip()],
      })

      Object.assign(tooltip.style, {
        left: `${x}px`,
        top: `${y}px`,
      })

      const lspText = reference.getAttribute('lsp')
      tooltip.textContent = lspText
      tooltip.classList.add(
        'font-mono',
        'absolute',
        'bg-gray-700',
        'text-white',
        'text-left',
        'p-2',
        'text-sm',
        'whitespace-pre-wrap'
      )

      document.body.append(tooltip)

      reference.addEventListener(
        'mouseout',
        () => {
          tooltip.remove()
          reference.removeAttribute('aria-describedby')
        },
        {
          once: true,
        }
      )
    })
  }
</script>
