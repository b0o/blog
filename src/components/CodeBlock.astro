---
import CopyCodeBlockButton from '@components/CopyCodeBlockButton'
import DevIcon, { DevIconName } from '@components/DevIcon.astro'
import { useTranslate } from '@utils/i18n'
import { FileText } from 'lucide-react'
import * as DevIcons from './devicons'
import type { Lang } from 'shiki'
import type { HTMLAttributes } from 'astro/types'
import clsx from 'clsx'
import '@assets/css/twoslash.css'

const t = useTranslate(Astro)

// eslint-disable-next-line @typescript-eslint/no-unused-vars
type Props = HTMLAttributes<'pre'> & {
  shikiBg: string
  shikiFg: string
  title: string
  lang: Lang
  plainCode: string
}

const { shikiBg, shikiFg, title, lang, plainCode, twoslash, ...rest } =
  Astro.props

const getDevIconNameByShikiLang = (lang: Lang): DevIconName | undefined => {
  const shikiLangToDevIconName: Partial<Record<Lang, DevIconName>> = {
    jsx: 'Javascript',
    tsx: 'Typescript',
    js: 'Javascript',
    ts: 'Typescript',
    css: 'Css3',
    html: 'Html5',
    shell: 'Bash',
  }

  if (lang in shikiLangToDevIconName) {
    return shikiLangToDevIconName[lang as keyof typeof shikiLangToDevIconName]
  }
}

const getShikiLangName = (lang: Lang): string | undefined => {
  const shikiLangToName: Partial<Record<Lang, string>> = {
    jsx: 'JavaScript',
    tsx: 'TypeScript',
    javascript: 'JavaScript',
    js: 'JavaScript',
    ts: 'TypeScript',
    typescript: 'TypeScript',
    shell: 'Bash',
    html: 'HTML',
    css: 'CSS',
  }

  if (lang in shikiLangToName) {
    return shikiLangToName[lang as keyof typeof shikiLangToName]
  }
}

const langName = getShikiLangName(Astro.props.lang) || Astro.props.lang

const isDevIconName = (str: string): str is DevIconName => {
  return Object.keys(DevIcons)
    .map((iconName) => iconName.toLowerCase())
    .includes(str)
}

const capitalize = <T extends string>(str: T) =>
  (str.charAt(0).toUpperCase() + str.slice(1)) as Capitalize<T>

const devIconName = isDevIconName(lang)
  ? (capitalize(Astro.props.lang) as DevIconName)
  : getDevIconNameByShikiLang(lang)
---

<style is:global define:vars={{ 'code-bg': shikiBg, 'code-fg': shikiFg }}
></style>

<div data-codeblock class:list={['mt-16', 'group', 'relative', 'mb-8']}>
  <pre
    class:list={[
      'relative',
      'shiki',
      twoslash && 'twoslash',
      'shadow',
      'shadow-shadow',
      'overflow-x-auto',
      'rounded',
      'rounded-tl-none',
      'bg-[var(--code-bg)]',
      'text-[var(--code-fg)]',
      'py-4',
      '[color-scheme:dark]',
      '[&_code]:grid',
      '[&_code>.line]:px-8',
      '[&_code>.line]:border-l-[2px]',
      '[&_code>.line]:border-[var(--code-bg)]',
      '[&_code>.line.highlight]:bg-[#272115]',
      '[&_code>.line.highlight]:border-[#624710]',
      Astro.props.class,
    ]}
    {...rest}><slot /></pre>

  <div
    class="dark text-md absolute top-0 left-horizontal-padding mx-auto max-w-[calc(100%-var(--horizontal-padding)*2)] -translate-y-[100%] overflow-hidden sm:left-0"
  >
    <div
      class="flex items-center gap-2 rounded-t border-t border-primary bg-[var(--code-bg)] px-2 py-1 text-[var(--code-fg)]"
    >
      <div class="shrink-0">
        {devIconName ? <DevIcon name={devIconName} /> : <FileText />}
      </div>

      {
        title ? (
          <div class="rtl truncate text-right font-mono">
            <bdi>{title}</bdi>
          </div>
        ) : (
          <div class="capitalize">{langName}</div>
        )
      }
    </div>
  </div>

  <CopyCodeBlockButton
    client:load
    aria-label={t('CopyCodeButtonLabel')}
    tooltipText={t('Copied') + '!'}
    code={plainCode}
    className={clsx(
      'transition-opacity',
      'duration-500',
      'opacity-0',
      'pointer-events-none',
      'group-hover:opacity-100',
      'group-hover:pointer-events-auto',
      'focus:opacity-100',
      'focus:pointer-events-auto'
    )}
  />
</div>

<script>
  import { computePosition, offset, shift } from '@floating-ui/dom'

  for (const codeBlock of document.querySelectorAll(
    '[data-codeblock] pre.twoslash'
  )) {
    const lspElements = codeBlock.querySelectorAll<HTMLElement>('data-lsp')

    for (const lspElement of lspElements) {
      lspElement.addEventListener('mouseover', async (e) => {
        if (!e.target) {
          return
        }

        const hoverElement = document.createElement('div')

        const reference = e.target as HTMLElement

        const { x, y } = await computePosition(reference, hoverElement, {
          placement: 'bottom-start',
          middleware: [shift({ padding: 8 }), offset(8)],
        })

        Object.assign(hoverElement.style, {
          left: `${x}px`,
          top: `${y}px`,
        })

        const lspText = reference.getAttribute('lsp')
        hoverElement.textContent = lspText as string
        hoverElement.classList.add(
          'absolute',
          'bg-gray-700',
          'text-white',
          'text-left',
          'p-2',
          'text-sm',
          'whitespace-pre-wrap'
        )

        document.body.append(hoverElement)

        reference.addEventListener('mouseout', () => {
          hoverElement.remove()
        })
      })
    }
  }
</script>
