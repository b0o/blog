---
import Site from '@layouts/Site.astro'
import { getLanguageFromUrl, useTranslate } from '@utils/i18n'
import { getBlogPostName, getBlogPosts, getBlogPostTags } from '@utils/posts'
import { localizeUrl } from '@utils/i18n'
import { ChevronRight } from 'lucide-react'
import type { CollectionEntry } from 'astro:content'
import { format } from 'date-fns'
import _ from 'lodash'

export async function getStaticPaths() {
  const englishBlogPosts = await getBlogPosts('en')
  const portugueseBlogPosts = await getBlogPosts('pt')

  const englishTags = getBlogPostTags(englishBlogPosts)
  const portugueseTags = getBlogPostTags(portugueseBlogPosts)

  return [
    englishTags.map((tag) => {
      const blogPosts = englishBlogPosts.filter((blogPost) =>
        blogPost.data.tags?.includes(tag)
      )

      return {
        params: { lang: undefined, id: tag },
        props: {
          blogPosts,
          tag,
          isTranslated: portugueseTags.includes(tag),
        },
      }
    }),
    portugueseTags.map((tag) => {
      const blogPosts = portugueseBlogPosts.filter((blogPost) =>
        blogPost.data.tags?.includes(tag)
      )

      return {
        params: { lang: 'pt', id: tag },
        props: {
          blogPosts,
          tag,
          isTranslated: englishTags.includes(tag),
        },
      }
    }),
  ]
}

const t = useTranslate(Astro)

type Props = {
  blogPosts: CollectionEntry<'posts'>[]
  tag: string
  isTranslated: boolean
}

const { tag, blogPosts, isTranslated } = Astro.props

const blogPostsGroupedByYear = _.groupBy(blogPosts, (blogPost) => {
  return format(blogPost.data.date, 'yyyy')
})

const years = Object.keys(blogPostsGroupedByYear).sort(
  (yearA, yearB) => Number(yearB) - Number(yearA)
)

const language = getLanguageFromUrl(Astro.url.pathname)
---

<Site
  isTranslated={isTranslated}
  title={t(`BlogPostsTaggedWith`, { vars: { tag } })}
  description={t('TagDescription', {
    n: blogPosts.length,
    vars: { count: blogPosts.length, tag },
  })}
>
  <main class="grid grid-cols-layout">
    <div class="">
      <div
        class="mb-8 w-full hidden sm:flex flex-row items-center justify-center gap-2 text-2xl"
      >
        <span>
          <a
            class="text-2xl font-serif font-bold"
            href={localizeUrl('/tags', language)}>Tags</a
          >
        </span>

        <span class="text-sm">
          <ChevronRight />
        </span>

        <h1 class="m-0">
          {tag}
        </h1>
      </div>

      <ul class="list-none ml-0 mt-8">
        {
          years.map((year) => {
            const blogPosts = blogPostsGroupedByYear[year]

            return (
              <>
                <h2 class="m-0 my-8 tabular-nums first:mt-0 sm:px-horizontal-padding">
                  {year}
                </h2>

                {blogPosts
                  .sort(
                    (blogPostA, blogPostB) =>
                      blogPostB.data.date.getTime() -
                      blogPostA.data.date.getTime()
                  )
                  .map((blogPost) => {
                    return (
                      <li class="mb-2 max-w-2xl last:mb-0">
                        <a
                          class="group flex gap-4 py-2 sm:px-horizontal-padding"
                          href={localizeUrl(
                            '/posts/' + getBlogPostName(blogPost),
                            language
                          )}
                        >
                          <time class="min-w-[6ch] flex-shrink-0 text-lg tabular-nums sm:text-right">
                            {format(blogPost.data.date, 'MMM dd')}
                          </time>

                          <h2 class="m-0 border-l border-primary pl-4 text-lg font-normal transition-colors duration-300 sm:group-hover:text-primary">
                            {blogPost.data.title}
                          </h2>
                        </a>
                      </li>
                    )
                  })}
              </>
            )
          })
        }
      </ul>
    </div>
  </main>
</Site>
