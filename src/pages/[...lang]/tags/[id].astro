---
import Site from '@layouts/Site.astro'
import { getLanguageFromUrl, useTranslate } from '@utils/i18n'
import { getBlogPostName, getBlogPosts, getBlogPostTags } from '@utils/posts'
import { localizeUrl } from '@utils/i18n'
import { Calendar, ChevronRight } from 'lucide-react'
import type { CollectionEntry } from 'astro:content'
import { format } from 'date-fns'
import _ from 'lodash'
import Link from '@components/Link.astro'

export async function getStaticPaths() {
  const englishBlogPosts = await getBlogPosts('en')
  const portugueseBlogPosts = await getBlogPosts('pt')

  const englishTags = getBlogPostTags(englishBlogPosts)
  const portugueseTags = getBlogPostTags(portugueseBlogPosts)

  return [
    ...englishTags.map((tag) => {
      const blogPosts = englishBlogPosts.filter((blogPost) =>
        blogPost.data.tags?.includes(tag)
      )

      return {
        params: { lang: undefined, id: tag },
        props: {
          blogPosts,
          tag,
          isTranslated: portugueseTags.includes(tag),
        },
      }
    }),
    ...portugueseTags.map((tag) => {
      const blogPosts = portugueseBlogPosts.filter((blogPost) =>
        blogPost.data.tags?.includes(tag)
      )

      return {
        params: { lang: 'pt', id: tag },
        props: {
          blogPosts,
          tag,
          isTranslated: englishTags.includes(tag),
        },
      }
    }),
  ]
}

const t = useTranslate(Astro)

type Props = {
  blogPosts: CollectionEntry<'posts'>[]
  tag: string
  isTranslated: boolean
}

const { tag, blogPosts, isTranslated } = Astro.props

const blogPostsGroupedByYear = _.groupBy(blogPosts, (blogPost) => {
  return format(blogPost.data.date, 'yyyy')
})

const years = Object.keys(blogPostsGroupedByYear).sort(
  (yearA, yearB) => Number(yearB) - Number(yearA)
)

const language = getLanguageFromUrl(Astro.url.pathname)
---

<Site
  isTranslated={isTranslated}
  title={t.BlogPostsTaggedWith({ tag })}
  description={t.TagDescription({
    count: blogPosts.length,
    tag,
  })}
>
  <main class='grid grid-cols-layout my-6'>
    <div
      class='w-full [&_svg]:w-[1em] [&_svg]:h-[1em] flex flex-row items-center gap-2'
    >
      <Link
        class='underline-offset-8 text-base'
        href={localizeUrl('/tags', language)}
      >
        Tags
      </Link>

      <ChevronRight />

      <h1 class='text-base m-0'>
        {tag} ({blogPosts.length})
      </h1>
    </div>

    <ul class='list-none ml-0 mt-8'>
      {
        years.map((year) => {
          const blogPosts = blogPostsGroupedByYear[year]

          return (
            <>
              <h2 class='m-0 mb-2 mt-8 tabular-nums first:mt-0'>{year}</h2>

              {blogPosts
                .sort(
                  (blogPostA, blogPostB) =>
                    blogPostB.data.date.getTime() -
                    blogPostA.data.date.getTime()
                )
                .map((blogPost) => {
                  return (
                    <li class='mb-2 last:mb-0'>
                      <a
                        class='group flex flex-nowrap items-start gap-4'
                        href={localizeUrl(
                          '/posts/' + getBlogPostName(blogPost),
                          language
                        )}
                      >
                        <div class='flex min-w-[9ch] basis-2 flex-row items-center gap-2 [&_*]:shrink-0'>
                          <Calendar />

                          <time class='whitespace-nowrap'>
                            {format(blogPost.data.date, 'MMM dd')}
                          </time>
                        </div>

                        <h2 class='m-0 border-l border-primary pl-4 text-lg font-normal transition-colors duration-300 sm:group-hover:text-primary'>
                          {blogPost.data.title}
                        </h2>
                      </a>
                    </li>
                  )
                })}
            </>
          )
        })
      }
    </ul>
  </main>
</Site>
