---
import Site from '@layouts/Site.astro'
import Button from '@components/Button'
import { Loader, Download } from 'lucide-react'
import { getLanguageFromUrl, useTranslate } from '@utils/i18n'

export function getStaticPaths() {
  return [
    {
      params: { lang: undefined },
    },
    {
      params: { lang: 'pt' },
    },
  ]
}

const t = useTranslate(Astro)

const language = getLanguageFromUrl(Astro.url.pathname)

const resumeUrl =
  language === 'en'
    ? 'https://phelipetls.github.io/latex-resume/phelipe-teles-resume-en.pdf'
    : 'https://phelipetls.github.io/latex-resume/phelipe-teles-resume-ptbr.pdf'
---

<Site isTranslated title={t('Résumé')} description={t('RésuméDescription')}>
  <main class="grid flex-1 grid-cols-layout">
    <div class="flex flex-col col-full sm:col-content">
      <h1 class="hidden text-center sm:block mb-8">{t('Résumé')}</h1>

      <div
        data-resume-container
        data-resume-url={resumeUrl}
        class="relative h-full overflow-y-auto sm:border-divider sm:col-content sm:rounded sm:border"
      >
        <noscript>
          <embed class="w-full h-full" type="application/pdf" src={resumeUrl} />
        </noscript>

        <div
          data-resume-loading
          role="progressbar"
          class="h-full hidden absolute inset-0 items-center justify-center [&_svg]:animate-spin [&_svg]:duration-[1500ms]"
        >
          <Loader />
        </div>

        <canvas class="hidden" data-resume-canvas></canvas>

        <div
          data-resume-download-button
          class="hidden mx-auto absolute bottom-4 right-0 left-0 justify-center sm:hidden"
        >
          <Button
            className=""
            color="primary"
            href={resumeUrl}
            download
            size="huge"
          >
            <Download /> Download
          </Button>
        </div>
      </div>
    </div>
  </main>
</Site>

<script>
  import * as PDFObject from 'pdfobject'
  import * as pdfjsLib from 'pdfjs-dist/legacy/build/pdf.js'

  pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js'

  showPdf()

  async function showPdf() {
    const resumeContainer = document.querySelector<HTMLElement>(
      '[data-resume-container]'
    )
    const resumeUrl = resumeContainer?.dataset.resumeUrl

    if (!resumeUrl) {
      return
    }

    if (PDFObject.supportsPDFs) {
      PDFObject.embed(resumeUrl, resumeContainer)
      return
    }

    loading()

    try {
      const pdfDocument = await pdfjsLib.getDocument(resumeUrl).promise

      pdfDocument.getPage(1).then(function (page) {
        const scale =
          resumeContainer.clientWidth / page.getViewport({ scale: 1 }).width
        const viewport = page.getViewport({ scale })
        const outputScale = window.devicePixelRatio || 1

        const resumeCanvas = getResumeCanvas()
        if (!resumeCanvas) {
          return
        }

        const context = resumeCanvas.getContext('2d')

        if (!context) {
          return
        }

        resumeCanvas.width = Math.floor(viewport.width * outputScale)
        resumeCanvas.height = Math.floor(viewport.height * outputScale)
        resumeCanvas.style.width = Math.floor(viewport.width) + 'px'
        resumeCanvas.style.height = Math.floor(viewport.height) + 'px'

        const transform = [outputScale, 0, 0, outputScale, 0, 0]

        const renderTask = page.render({
          canvasContext: context,
          transform: transform,
          viewport: viewport,
        })
        return renderTask.promise
      })

      loaded()
      loadedSuccessfully()
    } catch (err) {
      loaded()
      throw err
    }

    function loading() {
      const resumeLoading = getResumeLoading()
      resumeLoading?.classList.remove('hidden')
      resumeLoading?.classList.add('flex')
    }

    function loaded() {
      getResumeLoading()?.remove()
      document.querySelector('main')?.classList.remove('flex-1')
    }

    function loadedSuccessfully() {
      document
        .querySelector('[data-resume-download-button]')
        ?.classList.remove('hidden')
      document
        .querySelector('[data-resume-download-button]')
        ?.classList.add('flex')
      getResumeCanvas()?.classList.remove('hidden')
    }

    function getResumeCanvas() {
      return document.querySelector<HTMLCanvasElement>('[data-resume-canvas]')
    }

    function getResumeLoading() {
      return document.querySelector<HTMLCanvasElement>('[data-resume-loading]')
    }
  }
</script>
