---
import BlogPost from '@layouts/BlogPost.astro'
import CodeBlock from '@components/CodeBlock.astro'
import Link from '@components/Link.astro'
import H2 from '@components/H2.astro'
import H3 from '@components/H3.astro'
import H4 from '@components/H4.astro'
import H5 from '@components/H5.astro'
import H6 from '@components/H6.astro'
import type { CollectionEntry } from 'astro:content'
import { getBlogPosts, getBlogPostName } from '@utils/posts'
import _ from 'lodash'

export async function getStaticPaths() {
  const englishBlogPosts = await getBlogPosts('en')
  const portugueseBlogPosts = await getBlogPosts('pt')

  const portugueseBlogPostsNames = portugueseBlogPosts.map((p) =>
    getBlogPostName(p)
  )
  const englishBlogPostsNames = englishBlogPosts.map((p) => getBlogPostName(p))

  function sortByDateInAscendingOrder(blogPosts: CollectionEntry<'posts'>[]) {
    return blogPosts.sort((blogPostA, blogPostB) => {
      return (
        new Date(blogPostA.data.date).getTime() -
        new Date(blogPostB.data.date).getTime()
      )
    })
  }

  return [
    ...sortByDateInAscendingOrder(englishBlogPosts).map(
      (blogPost, index, blogPosts) => {
        const nextBlogPost = blogPosts[index + 1] ?? null
        const prevBlogPost = blogPosts[index - 1] ?? null

        return {
          params: { lang: undefined, id: getBlogPostName(blogPost) },
          props: {
            blogPost: {
              ...blogPost,
              isTranslated: portugueseBlogPostsNames.includes(
                getBlogPostName(blogPost)
              ),
            },
            nextBlogPost,
            prevBlogPost,
          },
        }
      }
    ),
    ...sortByDateInAscendingOrder(portugueseBlogPosts).map(
      (blogPost, index, blogPosts) => {
        const nextBlogPost = blogPosts[index + 1] ?? null
        const prevBlogPost = blogPosts[index - 1] ?? null

        return {
          params: { lang: 'pt', id: getBlogPostName(blogPost) },
          props: {
            blogPost: {
              ...blogPost,
              isTranslated: englishBlogPostsNames.includes(
                getBlogPostName(blogPost)
              ),
            },
            nextBlogPost,
            prevBlogPost,
          },
        }
      }
    ),
  ]
}

type Props = {
  blogPost: CollectionEntry<'posts'> & { isTranslated: boolean }
  nextBlogPost: CollectionEntry<'posts'> | null
  prevBlogPost: CollectionEntry<'posts'> | null
}

const { blogPost, nextBlogPost, prevBlogPost } = Astro.props
const { Content, headings, remarkPluginFrontmatter } = await blogPost.render()

const components = {
  pre: CodeBlock,
  a: Link,
  h1: H2,
  h2: H3,
  h3: H4,
  h4: H5,
  h5: H6,
}
---

<BlogPost
  frontmatter={remarkPluginFrontmatter}
  headings={headings}
  nextBlogPost={nextBlogPost}
  prevBlogPost={prevBlogPost}
  {...blogPost}
>
  <Content components={{ ...components, Fragment }} />
</BlogPost>
