---
import { format } from 'date-fns'
import { getLanguageFromUrl, localizeUrl, useTranslate } from '@utils/i18n'
import { getBlogPostName } from '@utils/posts'
import Site from '@layouts/Site.astro'
import Tag from '@components/Tag.astro'
import Katex from '@components/Katex.astro'
import PostNav from '@components/PostNav.astro'
import BlogPostDate from '@components/BlogPostDate.astro'
import BlogPostToc from '@components/BlogPostToc.astro'
import BlogPostReadingTime from '@components/BlogPostReadingTime.astro'
import type { MarkdownHeading } from 'astro'
import { getSandpackCssText } from '@codesandbox/sandpack-react'
import { formatISO } from 'date-fns'
import type { CollectionEntry } from 'astro:content'
import IconButton from '@components/IconButton'
import clsx from 'clsx'
import { List, X } from 'lucide-react'

type Props = CollectionEntry<'posts'> & {
  isTranslated: boolean
  headings: MarkdownHeading[]
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  frontmatter: Record<string, any>
  nextBlogPost: CollectionEntry<'posts'> | null
  prevBlogPost: CollectionEntry<'posts'> | null
}

const {
  data,
  frontmatter,
  headings,
  nextBlogPost,
  prevBlogPost,
  isTranslated,
} = Astro.props
const { readingTime, summary } = frontmatter
const { title, date, tags } = data

const language = getLanguageFromUrl(Astro.url.pathname)
const ogImageUrl = localizeUrl(
  `/posts/${getBlogPostName(Astro.props)}/image.png`,
  language
)

const t = useTranslate(Astro)

const emptyHeadings = headings.length === 0
---

<Site
  isTranslated={isTranslated}
  title={`${title} - Phelipe Teles`}
  description={summary}
  seo={{
    openGraph: {
      basic: {
        title: `${title}`,
        image: ogImageUrl,
        type: 'article',
      },
      article: {
        tags,
        publishedTime: formatISO(new Date(date)),
        authors: ['Phelipe Teles'],
      },
    },
    twitter: {
      card: 'summary_large_image',
    },
    extend: {
      meta: [
        {
          name: 'twitter:image',
          content: ogImageUrl,
        },
      ],
    },
  }}
  htmlClass="scroll-smooth scroll-pt-nav-height sm:scroll-pt-0"
>
  <Fragment slot="head">
    <meta name="publish-date" content={format(date, 'yyyy-MM-dd')} />
    {tags && <meta name="keywords" content={tags.join(', ')} />}
    <meta name="description" content={summary} />

    {data.math && <Katex />}

    {/* FIXME: only include this if the page needs it */}
    <style id="sandpack" set:html={getSandpackCssText()}></style>
  </Fragment>

  <main class="grid grid-cols-layout">
    <div class="pt-8 sm:col-content px-0">
      <article>
        <header class="flex flex-col sm:items-center">
          <h1 class="mb-4 text-4xl max-w-prose">
            {title}
          </h1>

          <div class="mb-4 flex gap-2 flex-row">
            <BlogPostDate date={date} />
            <BlogPostReadingTime readingTime={readingTime} />
          </div>

          {
            tags && (
              <div class="mb-4 flex max-w-lg flex-wrap gap-2">
                {tags.map((tag) => {
                  return <Tag tag={tag} />
                })}

                <Tag tag="..." />
              </div>
            )
          }
        </header>

        <hr class="my-8" />

        <div
          data-blog-post-container
          data-toc={emptyHeadings ? 'closed' : 'open'}
          class:list={[
            'group',
            'flex',
            'flex-col-reverse',
            'w-full',
            'lg:gap-8',
            'lg:flex-row',
          ]}
        >
          <div
            data-blog-post
            class:list={[
              'w-full',
              'max-w-prose',
              'mx-auto',
              'lg:group-data-toc-open:mx-0',
              '[&>pre]:my-8',
              '[&>pre]:full-width-on-mobile',
              '[&>img]:my-8',
              '[&_img]:mx-auto',
              '[&>hr]:border-0',
              '[&>hr]:text-center',
              "[&>hr]:after:content-['⁂']",
              '[&>figure]:my-8',
              '[&>figure]:full-width-on-mobile',
              '[&>astro-island>div]:my-8',
              '[&>lite-youtube]:my-8',
              '[&>blockquote]:my-8',
              '[&>figure_video]:min-h-[15em]',
              '[&_.katex-display]:overflow-x-auto',
              '[&_.katex-display]:overflow-y-hidden',
            ]}
          >
            <slot />
          </div>

          {
            !emptyHeadings && (
              <aside
                style={{
                  '--offset-from-top': '1rem',
                }}
                class:list={[
                  'min-w-0',
                  'mb-8',
                  'lg:mb-0',
                  'relative',
                  'card',
                  'lg:group-data-toc-open:basis-1/3',
                  'lg:group-data-toc-open:ml-auto',
                  'lg:group-data-toc-open:p-4',
                  'lg:group-data-toc-closed:card-none',
                  'lg:sticky',
                  'lg:top-[var(--offset-from-top)]',
                  'lg:h-[calc(100vh-var(--offset-from-top)_*_2)]',
                ]}
              >
                <IconButton
                  data-toggle-toc
                  variant="rounded-full"
                  data-open-toc-label={t.OpenToc()}
                  data-close-toc-label={t.CloseToc()}
                  aria-label={t.CloseToc()}
                  className={clsx(
                    'absolute',
                    'top-4',
                    'right-4',
                    'hidden',
                    'lg:grid',
                    '[&_*]:col-start-1',
                    '[&_*]:col-end-1',
                    '[&_*]:row-start-1',
                    '[&_*]:row-end-1'
                  )}
                  style={{
                    // @ts-expect-error I'm allowed to do this
                    '--duration': '300ms',
                  }}
                >
                  <X className="scale-0 transition-transform duration-[var(--duration)] ease-out group-data-toc-open:scale-100 group-data-toc-open:delay-[var(--duration)]" />

                  <List className="scale-0 transition-transform duration-[var(--duration)] ease-in group-data-toc-closed:scale-100 group-data-toc-closed:delay-[var(--duration)" />
                </IconButton>

                <div class="lg:hidden lg:h-full lg:group-data-toc-open:block">
                  <BlogPostToc headings={headings} />
                </div>
              </aside>
            )
          }
        </div>
      </article>

      <hr class="full-width-on-mobile mt-8" />

      <PostNav
        class="full-width-on-mobile sm:my-8"
        prevBlogPost={prevBlogPost}
        nextBlogPost={nextBlogPost}
      />

      <hr class="full-width-on-mobile mb-8" />
    </div>
  </main>
</Site>

<script>
  document
    .querySelector('[data-toggle-toc]')
    ?.addEventListener('click', (e) => {
      const blogPostContainer = document.querySelector<HTMLElement>(
        '[data-blog-post-container]'
      )

      if (!blogPostContainer) {
        return
      }

      const toggleTocButton = e.currentTarget as HTMLElement

      const toggledTocState =
        blogPostContainer.dataset.toc === 'open' ? 'closed' : 'open'

      if (toggledTocState === 'open') {
        toggleTocButton.setAttribute(
          'aria-label',
          toggleTocButton.dataset.closeTocLabel ?? ''
        )
      } else {
        toggleTocButton.setAttribute(
          'aria-label',
          toggleTocButton.dataset.openTocLabel ?? ''
        )
      }

      blogPostContainer.dataset.toc = toggledTocState
    })
</script>
