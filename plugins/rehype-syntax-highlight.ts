import type { Root } from 'hast'
import { toString as hastToString } from 'hast-util-to-string'
import { h } from 'hastscript'
import { fromHtml } from 'hast-util-from-html'
import shiki from 'shiki'
import parse from 'fenceparser'
import {
  renderCodeToHTML,
  runTwoSlash,
  createShikiHighlighter,
} from 'shiki-twoslash'
import type { Plugin } from 'unified'
import { visit } from 'unist-util-visit'
import _ from 'lodash'

const THEME = 'one-dark-pro'

export const rehypeSyntaxHighlight: Plugin<[], Root> = () => {
  return async function (tree) {
    const shikiTheme = await shiki.loadTheme(`themes/${THEME}.json`)

    const highlighter = await createShikiHighlighter({
      theme: THEME,
    })

    return visit(tree, 'element', (node, __, parent) => {
      if (
        !parent ||
        !('tagName' in parent) ||
        parent.tagName !== 'pre' ||
        node?.tagName !== 'code'
      ) {
        return
      }

      const metastring = node.properties?.metastring ?? ''
      const meta = parse(metastring as string) ?? {}

      let title = ''
      if (typeof metastring === 'string' && metastring.includes('title=')) {
        title = metastring.match(/title="(.+)"/)?.[1] ?? ''
      }

      if (node.properties && Array.isArray(node.properties?.style)) {
        node.properties.style = node.properties.style.concat([
          `color: ${shikiTheme.fg}`,
        ])
      }

      parent.properties = {
        ...parent.properties,
        shikiBg: shikiTheme.bg,
        shikiFg: shikiTheme.fg,
        title,
      }

      let lang = ''
      if (Array.isArray(node.properties?.className)) {
        lang =
          node.properties?.className
            .filter(isString)
            .find((className: string) => className.startsWith('language-'))
            ?.replace('language-', '') ?? ''
      }

      const plainCode = hastToString(node)

      let codeToCopy = plainCode
      let playgroundURL = null

      if (meta.twoslash) {
        const twoslashResults = runTwoSlash(plainCode, lang)

        codeToCopy = twoslashResults.code
        playgroundURL = twoslashResults.playgroundURL

        const syntaxHighlightedCode = renderCodeToHTML(
          twoslashResults.code,
          twoslashResults.extension,
          meta,
          {
            themeName: THEME,
          },
          highlighter,
          twoslashResults
        )

        // The code blocks generated by twoslash look like this:
        //
        // <pre class='shiki lsp twoslash [theme-name]'>
        //   <div class='language-id'>[lang-id]</div>
        //     <div class='code-container'>
        //       <code>[the code as a series of spans]</code>
        //       <a href='playground...'>Try</a> (optional)
        //     </div>
        //   </pre>
        //
        // Here, we try to get only the children of the `code` tag.
        const hastTree = fromHtml(syntaxHighlightedCode, { fragment: true })

        visit(hastTree, 'element', (_node, ___, _parent) => {
          if (_node.tagName === 'code') {
            node.children = _node.children
          }
        })
      } else {
        const themedTokens = highlighter.codeToThemedTokens(plainCode, lang)

        const highlightedLines =
          'highlight' in meta && Array.isArray(meta.highlight)
            ? meta.highlight
            : []

        const syntaxHighlightedCode = themedTokens
          .filter((tokens) => tokens.some((token) => token.content !== ''))
          .flatMap((tokens, index) => {
            const isLineHighlighted = highlightedLines.includes(index + 1)

            return h(
              'span',
              {
                className: ['line', isLineHighlighted && 'highlight']
                  .filter(Boolean)
                  .join(' '),
              },
              tokens.map((token) => {
                return h(
                  'span',
                  token.color ? { style: `color: ${token.color}` } : {},
                  token.content
                )
              })
            )
          })

        node.children = syntaxHighlightedCode
      }

      parent.properties = {
        ...parent.properties,
        codeToCopy,
        playgroundURL,
        lang,
        twoslash: Boolean(meta.twoslash),
      }
    })
  }
}

export const isString = (value: unknown): value is string => {
  return typeof value === 'string'
}
